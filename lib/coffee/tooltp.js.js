// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ApiHeroUI.Bootstrap.Tooltip = (function(superClass) {
  extend(Tooltip, superClass);

  function Tooltip() {
    return Tooltip.__super__.constructor.apply(this, arguments);
  }

  Tooltip.prototype.ns = ApiHeroUI.controls;

  Tooltip.prototype.options = new (Backbone.Model.extend({
    defaults: {
      "data-placement": "top",
      title: ""
    },
    validate: function(attrs, opts) {
      var attr, valid;
      valid = ['top', 'left', 'bottom', 'right'];
      attr = 'data-placement';
      if (attrs.hasOwnProperty(attr)) {
        if (!(0 <= valid.indexOf(attrs[attr]))) {
          return 'data-placement must be top,left,bottom or right';
        }
      }
    },
    valueOf: function() {
      var o;
      o = this.attributes;
      o['data-toggle'] = 'tooltip';
      return o;
    }
  }));

  Tooltip.prototype.render = function(options) {
    if (!this.options.isValid()) {
      return;
    }
    this.attributes = _.extend(this.attributes, this.model.valueOf());
    return this;
  };

  Tooltip.prototype.intialize = function(el, opts) {
    if (opts == null) {
      opts = {};
    }
    return this.options.on('change', this.render, this).set(opts);
  };

  return Tooltip;

})(Backbone.View);

$.fn.Tooltip = (function(_this) {
  return function(opts) {
    return new ApiHeroUI.Bootstrap.Tooltip({
      el: _this
    }, opts || {});
  };
})(this);
